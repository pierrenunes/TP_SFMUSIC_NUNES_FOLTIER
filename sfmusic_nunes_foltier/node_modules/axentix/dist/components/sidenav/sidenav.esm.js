var P = Object.defineProperty;
var Z = (s, e, t) => e in s ? P(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t;
var S = (s, e, t) => (Z(s, typeof e != "symbol" ? e + "" : e, t), t), q = (s, e, t) => {
  if (!e.has(s))
    throw TypeError("Cannot " + t);
};
var n = (s, e, t) => (q(s, e, "read from private field"), t ? t.call(s) : e.get(s)), c = (s, e, t) => {
  if (e.has(s))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(s) : e.set(s, t);
}, r = (s, e, t, i) => (q(s, e, "write to private field"), i ? i.call(s, t) : e.set(s, t), t);
var g = (s, e, t) => (q(s, e, "access private method"), t);
const x = [], E = {
  components: [],
  plugins: [],
  prefix: "ax",
  mode: ""
}, T = (s) => E.components.find((e) => e.name === s).class, F = () => {
  const s = E.components.filter((t) => t.dataDetection), e = E.plugins.filter((t) => t.dataDetection);
  return [...s, ...e].map((t) => t.name);
}, G = (s, e) => {
  if (!s.name || !s.class) {
    console.error(`[Axentix] Error registering ${e} : Missing required parameters.`);
    return;
  }
  if (E[e].some((t) => t.name === s.name)) {
    console.error(`[Axentix] Error registering ${e} : Already exist.`);
    return;
  }
  s.autoInit && (s.autoInit.selector = s.autoInit.selector += ":not(.no-axentix-init)"), E[e].push(s);
}, J = (s) => {
  G(s, "components");
}, K = (s) => s.replace(/[\w]([A-Z])/g, (e) => e[0] + "-" + e[1]).toLowerCase(), Q = (s, e = "") => {
  const t = K(s);
  return e ? e + "-" + t : t;
}, V = (s, e, t, i, o = "") => {
  const a = e[0].toUpperCase() + e.slice(1).toLowerCase();
  F().includes(a) && t !== "Collapsible" && a !== "Sidenav" && (s[e] = T(a).getDefaultOptions());
  const l = o ? o + "-" + e : e, d = U(s[e], t, i, l);
  if (!(Object.keys(d).length === 0 && s.constructor === Object))
    return d;
}, U = (s, e, t, i = "") => Object.keys(s).reduce((o, a) => {
  if (typeof s[a] == "object" && s[a] !== null) {
    const l = V(s, a, e, t, i);
    l && (o[a] = l);
  } else if (s[a] !== null) {
    const l = "data-" + e.toLowerCase() + "-" + Q(a, i);
    if (t.hasAttribute(l)) {
      const d = t.getAttribute(l);
      o[a] = typeof s[a] == "number" ? Number(d) : d, typeof s[a] == "boolean" && (o[a] = d === "true");
    }
  }
  return o;
}, {}), X = (s, e) => {
  const t = Object.assign({}, T(s).getDefaultOptions());
  return U(t, s, e);
}, Y = () => {
  document.querySelectorAll("[data-ax]").forEach((e) => {
    let t = e.dataset.ax;
    if (t = t[0].toUpperCase() + t.slice(1).toLowerCase(), !F().includes(t)) {
      console.error(
        `[Axentix] Error: ${t} component doesn't exist. 
 Did you forget to register him ?`,
        e
      );
      return;
    }
    try {
      const i = T(t);
      new i(`#${e.id}`);
    } catch (i) {
      console.error("[Axentix] Data: Unable to load " + t, i);
    }
  });
}, _ = () => {
  try {
    new Axentix.Axentix("all");
  } catch (s) {
    console.error("[Axentix] Unable to auto init.", s);
  }
};
document.addEventListener("DOMContentLoaded", () => {
  document.documentElement.dataset.axentix && _(), Y();
});
const W = (...s) => s.reduce((e, t) => {
  for (let i in t)
    e[i] = typeof t[i] == "object" && t[i] !== null ? W(e[i], t[i]) : t[i];
  return e;
}, {}), j = (s, e, t) => W(T(s).getDefaultOptions(), X(s, t), e), f = (s, e, t) => {
  const i = new CustomEvent("ax." + e, {
    detail: t || {},
    bubbles: !0
  });
  s.dispatchEvent(i);
}, tt = (s) => x.filter((e) => e.type === s).map((e) => e.instance), et = (s) => {
  const e = x.find((t) => t.type !== "Toast" && "#" + t.instance.el.id === s);
  return e ? e.instance : !1;
}, st = (s, e, t, i) => {
  const o = s && e ? document.querySelector(`.ax-overlay[data-target="${t}"]`) : document.createElement("div");
  return o.classList.add("ax-overlay"), o.style.transitionDuration = i + "ms", o.dataset.target = t, o;
}, z = (s, e, t, i, o) => {
  !s || (i ? (e.addEventListener("click", t), document.body.appendChild(e), setTimeout(() => {
    e.classList.add("active");
  }, 50)) : (e.classList.remove("active"), setTimeout(() => {
    e.removeEventListener("click", t), document.body.removeChild(e);
  }, o)));
}, it = (s, e = '[data-target="{ID}"]') => Array.from(document.querySelectorAll(e.replace("{ID}", s)));
class nt {
  constructor() {
    S(this, "el");
  }
  removeListeners() {
  }
  setupListeners() {
  }
  setup() {
  }
  preventDbInstance(e) {
    if (e && et(e))
      throw new Error(`Instance already exist on ${e}`);
  }
  sync() {
    f(this.el, "component.sync"), this.removeListeners(), this.setupListeners();
  }
  reset() {
    f(this.el, "component.reset"), this.removeListeners(), this.setup();
  }
  destroy() {
    f(this.el, "component.destroy"), this.removeListeners();
    const e = x.findIndex((t) => t.instance.el.id === this.el.id);
    x.splice(e, 1);
  }
}
const ot = {
  overlay: !0,
  bodyScrolling: !1,
  animationDuration: 300
};
var L, h, u, y, D, p, w, v, m, A, b, M, O, $, I, N, C, R, k, H;
class B extends nt {
  constructor(t, i) {
    super();
    c(this, b);
    c(this, O);
    c(this, I);
    c(this, C);
    c(this, k);
    S(this, "options");
    c(this, L, void 0);
    c(this, h, !1);
    c(this, u, !1);
    c(this, y, !1);
    c(this, D, !1);
    c(this, p, void 0);
    c(this, w, void 0);
    c(this, v, void 0);
    c(this, m, void 0);
    c(this, A, void 0);
    try {
      this.preventDbInstance(t), x.push({ type: "Sidenav", instance: this }), this.el = document.querySelector(t), this.options = j("Sidenav", i, this.el), this.setup();
    } catch (o) {
      console.error("[Axentix] Sidenav init error", o);
    }
  }
  setup() {
    f(this.el, "sidenav.setup"), r(this, L, it(this.el.id)), r(this, h, !1), r(this, u, !1), r(this, A, window.innerWidth), r(this, y, this.el.classList.contains("sidenav-fixed"));
    const t = tt("Sidenav").find((i) => n(i, y));
    r(this, D, t && t.el === this.el), r(this, p, document.querySelector('.layout, [class*="layout-"]')), n(this, p) && n(this, D) && g(this, O, $).call(this), this.setupListeners(), this.options.overlay && r(this, w, st(
      n(this, h),
      this.options.overlay,
      this.el.id,
      this.options.animationDuration
    )), n(this, p) && n(this, y) && g(this, I, N).call(this), this.el.style.transitionDuration = this.options.animationDuration + "ms";
  }
  setupListeners() {
    r(this, v, g(this, k, H).bind(this)), n(this, L).forEach((t) => t.addEventListener("click", n(this, v))), r(this, m, g(this, b, M).bind(this)), window.addEventListener("resize", n(this, m));
  }
  removeListeners() {
    n(this, L).forEach((t) => t.removeEventListener("click", n(this, v))), r(this, v, void 0), window.removeEventListener("resize", n(this, m)), r(this, m, void 0);
  }
  destroy() {
    f(this.el, "component.destroy"), this.removeListeners(), n(this, p) && g(this, O, $).call(this);
    const t = x.findIndex((i) => i.instance.el.id === this.el.id);
    x.splice(t, 1);
  }
  open() {
    n(this, h) || n(this, u) || (f(this.el, "sidenav.open"), r(this, h, !0), r(this, u, !0), this.el.classList.add("active"), z(
      this.options.overlay,
      n(this, w),
      n(this, v),
      !0,
      this.options.animationDuration
    ), g(this, C, R).call(this, !1), setTimeout(() => {
      r(this, u, !1), f(this.el, "sidenav.opened");
    }, this.options.animationDuration));
  }
  close() {
    !n(this, h) || n(this, u) || (r(this, u, !0), f(this.el, "sidenav.close"), this.el.classList.remove("active"), z(
      this.options.overlay,
      n(this, w),
      n(this, v),
      !1,
      this.options.animationDuration
    ), setTimeout(() => {
      g(this, C, R).call(this, !0), r(this, h, !1), r(this, u, !1), f(this.el, "sidenav.closed");
    }, this.options.animationDuration));
  }
}
L = new WeakMap(), h = new WeakMap(), u = new WeakMap(), y = new WeakMap(), D = new WeakMap(), p = new WeakMap(), w = new WeakMap(), v = new WeakMap(), m = new WeakMap(), A = new WeakMap(), b = new WeakSet(), M = function(t) {
  const o = t.target.innerWidth;
  n(this, A) !== o && this.close(), r(this, A, o);
}, O = new WeakSet(), $ = function() {
  ["layout-sidenav-right", "layout-sidenav-both"].forEach(
    (t) => n(this, p).classList.remove(t)
  );
}, I = new WeakSet(), N = function() {
  if (!n(this, D))
    return;
  const t = Array.from(document.querySelectorAll(".sidenav")).filter(
    (l) => l.classList.contains("sidenav-fixed")
  ), { sidenavsRight: i, sidenavsLeft: o } = t.reduce(
    (l, d) => (d.classList.contains("sidenav-right") ? l.sidenavsRight.push(d) : l.sidenavsLeft.push(d), l),
    { sidenavsRight: [], sidenavsLeft: [] }
  ), a = o.length > 0 && i.length > 0;
  i.length > 0 && !a ? n(this, p).classList.add("layout-sidenav-right") : a && n(this, p).classList.add("layout-sidenav-both");
}, C = new WeakSet(), R = function(t) {
  this.options.bodyScrolling || (document.body.style.overflow = t ? "" : "hidden");
}, k = new WeakSet(), H = function(t) {
  t.preventDefault(), !(n(this, y) && window.innerWidth >= 960) && (n(this, h) ? this.close() : this.open());
}, S(B, "getDefaultOptions", () => ot);
J({
  class: B,
  name: "Sidenav",
  dataDetection: !0,
  autoInit: {
    enabled: !0,
    selector: ".sidenav"
  }
});
export {
  B as default
};
