var G = Object.defineProperty;
var J = (s, e, t) => e in s ? G(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t;
var b = (s, e, t) => (J(s, typeof e != "symbol" ? e + "" : e, t), t), H = (s, e, t) => {
  if (!e.has(s))
    throw TypeError("Cannot " + t);
};
var n = (s, e, t) => (H(s, e, "read from private field"), t ? t.call(s) : e.get(s)), r = (s, e, t) => {
  if (e.has(s))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(s) : e.set(s, t);
}, o = (s, e, t, i) => (H(s, e, "write to private field"), i ? i.call(s, t) : e.set(s, t), t);
var u = (s, e, t) => (H(s, e, "access private method"), t);
const A = [], D = {
  components: [],
  plugins: [],
  prefix: "ax",
  mode: ""
}, q = (s) => D.components.find((e) => e.name === s).class, U = () => {
  const s = D.components.filter((t) => t.dataDetection), e = D.plugins.filter((t) => t.dataDetection);
  return [...s, ...e].map((t) => t.name);
}, K = (s, e) => {
  if (!s.name || !s.class) {
    console.error(`[Axentix] Error registering ${e} : Missing required parameters.`);
    return;
  }
  if (D[e].some((t) => t.name === s.name)) {
    console.error(`[Axentix] Error registering ${e} : Already exist.`);
    return;
  }
  s.autoInit && (s.autoInit.selector = s.autoInit.selector += ":not(.no-axentix-init)"), D[e].push(s);
}, Q = (s) => {
  K(s, "components");
}, V = (s) => s.replace(/[\w]([A-Z])/g, (e) => e[0] + "-" + e[1]).toLowerCase(), X = (s, e = "") => {
  const t = V(s);
  return e ? e + "-" + t : t;
}, Y = (s, e, t, i, l = "") => {
  const a = e[0].toUpperCase() + e.slice(1).toLowerCase();
  U().includes(a) && t !== "Collapsible" && a !== "Sidenav" && (s[e] = q(a).getDefaultOptions());
  const p = l ? l + "-" + e : e, x = N(s[e], t, i, p);
  if (!(Object.keys(x).length === 0 && s.constructor === Object))
    return x;
}, N = (s, e, t, i = "") => Object.keys(s).reduce((l, a) => {
  if (typeof s[a] == "object" && s[a] !== null) {
    const p = Y(s, a, e, t, i);
    p && (l[a] = p);
  } else if (s[a] !== null) {
    const p = "data-" + e.toLowerCase() + "-" + X(a, i);
    if (t.hasAttribute(p)) {
      const x = t.getAttribute(p);
      l[a] = typeof s[a] == "number" ? Number(x) : x, typeof s[a] == "boolean" && (l[a] = x === "true");
    }
  }
  return l;
}, {}), _ = (s, e) => {
  const t = Object.assign({}, q(s).getDefaultOptions());
  return N(t, s, e);
}, j = () => {
  document.querySelectorAll("[data-ax]").forEach((e) => {
    let t = e.dataset.ax;
    if (t = t[0].toUpperCase() + t.slice(1).toLowerCase(), !U().includes(t)) {
      console.error(
        `[Axentix] Error: ${t} component doesn't exist. 
 Did you forget to register him ?`,
        e
      );
      return;
    }
    try {
      const i = q(t);
      new i(`#${e.id}`);
    } catch (i) {
      console.error("[Axentix] Data: Unable to load " + t, i);
    }
  });
}, tt = () => {
  try {
    new Axentix.Axentix("all");
  } catch (s) {
    console.error("[Axentix] Unable to auto init.", s);
  }
};
document.addEventListener("DOMContentLoaded", () => {
  document.documentElement.dataset.axentix && tt(), j();
});
const R = (...s) => s.reduce((e, t) => {
  for (let i in t)
    e[i] = typeof t[i] == "object" && t[i] !== null ? R(e[i], t[i]) : t[i];
  return e;
}, {}), et = (s, e, t) => R(q(s).getDefaultOptions(), _(s, t), e), y = (s, e, t) => {
  const i = new CustomEvent("ax." + e, {
    detail: t || {},
    bubbles: !0
  });
  s.dispatchEvent(i);
}, st = (s) => A.filter((e) => e.type === s).map((e) => e.instance), it = (s) => {
  const e = A.find((t) => t.type !== "Toast" && "#" + t.instance.el.id === s);
  return e ? e.instance : !1;
}, nt = (s, e = '[data-target="{ID}"]') => Array.from(document.querySelectorAll(e.replace("{ID}", s)));
class ot {
  constructor() {
    b(this, "el");
  }
  removeListeners() {
  }
  setupListeners() {
  }
  setup() {
  }
  preventDbInstance(e) {
    if (e && it(e))
      throw new Error(`Instance already exist on ${e}`);
  }
  sync() {
    y(this.el, "component.sync"), this.removeListeners(), this.setupListeners();
  }
  reset() {
    y(this.el, "component.reset"), this.removeListeners(), this.setup();
  }
  destroy() {
    y(this.el, "component.destroy"), this.removeListeners();
    const e = A.findIndex((t) => t.instance.el.id === this.el.id);
    A.splice(e, 1);
  }
}
const rt = {
  animationDuration: 300,
  sidenav: {
    activeClass: !0,
    activeWhenOpen: !0,
    autoClose: !0
  }
};
var f, C, v, c, d, L, g, m, h, w, F, I, M, T, B, E, $, k, P, O, z, S, Z;
class W extends ot {
  constructor(t, i) {
    super();
    r(this, w);
    r(this, I);
    r(this, T);
    r(this, E);
    r(this, k);
    r(this, O);
    r(this, S);
    b(this, "options");
    r(this, f, void 0);
    r(this, C, void 0);
    r(this, v, !0);
    r(this, c, !1);
    r(this, d, !1);
    r(this, L, !1);
    r(this, g, void 0);
    r(this, m, void 0);
    r(this, h, void 0);
    try {
      this.preventDbInstance(t), A.push({ type: "Collapsible", instance: this }), this.el = document.querySelector(t), this.options = et("Collapsible", i, this.el), this.setup();
    } catch (l) {
      console.error("[Axentix] Collapsible init error", l);
    }
  }
  setup() {
    y(this.el, "collapsible.setup"), o(this, f, nt(this.el.id)), o(this, v, !0), o(this, c, !!this.el.classList.contains("active")), o(this, d, !1), o(this, h, ""), o(this, L, !1), this.setupListeners(), this.el.style.transitionDuration = this.options.animationDuration + "ms", u(this, I, M).call(this), o(this, L, !!this.el.querySelector(".active")), this.options.sidenav.activeClass && u(this, T, B).call(this), n(this, c) && this.open(), o(this, v, !1);
  }
  setupListeners() {
    o(this, g, u(this, S, Z).bind(this)), n(this, f).forEach((t) => t.addEventListener("click", n(this, g))), o(this, m, u(this, w, F).bind(this)), window.addEventListener("resize", n(this, m));
  }
  removeListeners() {
    n(this, f).forEach((t) => t.removeEventListener("click", n(this, g))), o(this, g, void 0), window.removeEventListener("resize", n(this, m)), o(this, m, void 0);
  }
  open() {
    n(this, c) && !n(this, v) || (y(this.el, "collapsible.open"), o(this, c, !0), o(this, d, !0), this.el.style.display = "block", u(this, O, z).call(this), this.el.style.maxHeight = this.el.scrollHeight + "px", this.options.sidenav.activeWhenOpen && u(this, E, $).call(this, !0), this.options.sidenav.autoClose && u(this, k, P).call(this), setTimeout(() => {
      o(this, d, !1);
    }, this.options.animationDuration));
  }
  close() {
    !n(this, c) || (y(this.el, "collapsible.close"), o(this, d, !0), this.el.style.maxHeight = "", u(this, O, z).call(this), this.options.sidenav.activeWhenOpen && u(this, E, $).call(this, !1), setTimeout(() => {
      this.el.style.display = "", o(this, d, !1), o(this, c, !1);
    }, this.options.animationDuration));
  }
}
f = new WeakMap(), C = new WeakMap(), v = new WeakMap(), c = new WeakMap(), d = new WeakMap(), L = new WeakMap(), g = new WeakMap(), m = new WeakMap(), h = new WeakMap(), w = new WeakSet(), F = function() {
  n(this, c) && !n(this, h) && (this.el.style.maxHeight = this.el.scrollHeight + "px");
}, I = new WeakSet(), M = function() {
  const t = this.el.closest(".sidenav");
  t && (o(this, h, t.id), o(this, C, n(this, f).filter((i) => {
    var l;
    return ((l = i.closest(".sidenav")) == null ? void 0 : l.id) === t.id;
  })));
}, T = new WeakSet(), B = function() {
  !n(this, L) || !n(this, h) || (n(this, C).forEach((t) => t.classList.add("active")), this.el.classList.add("active"), this.open(), o(this, c, !0));
}, E = new WeakSet(), $ = function(t) {
  !n(this, h) || n(this, C).forEach((i) => {
    t ? i.classList.add("active") : i.classList.remove("active");
  });
}, k = new WeakSet(), P = function() {
  !n(this, v) && n(this, h) && st("Collapsible").forEach((t) => {
    n(t, h) === n(this, h) && t.el.id !== this.el.id && t.close();
  });
}, O = new WeakSet(), z = function() {
  this.el.style.overflow = "hidden", setTimeout(() => {
    this.el.style.overflow = "";
  }, this.options.animationDuration);
}, S = new WeakSet(), Z = function(t) {
  t.preventDefault(), !n(this, d) && (n(this, c) ? this.close() : this.open());
}, b(W, "getDefaultOptions", () => rt);
Q({
  class: W,
  name: "Collapsible",
  dataDetection: !0,
  autoInit: {
    enabled: !0,
    selector: ".collapsible"
  }
});
export {
  W as default
};
