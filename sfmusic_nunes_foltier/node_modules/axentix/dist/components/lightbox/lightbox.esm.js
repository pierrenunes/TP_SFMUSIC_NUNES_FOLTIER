var at = Object.defineProperty;
var ct = (s, e, t) => e in s ? at(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t;
var I = (s, e, t) => (ct(s, typeof e != "symbol" ? e + "" : e, t), t), K = (s, e, t) => {
  if (!e.has(s))
    throw TypeError("Cannot " + t);
};
var i = (s, e, t) => (K(s, e, "read from private field"), t ? t.call(s) : e.get(s)), r = (s, e, t) => {
  if (e.has(s))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(s) : e.set(s, t);
}, o = (s, e, t, n) => (K(s, e, "write to private field"), n ? n.call(s, t) : e.set(s, t), t);
var c = (s, e, t) => (K(s, e, "access private method"), t);
const N = [], A = {
  components: [],
  plugins: [],
  prefix: "ax",
  mode: ""
}, F = (s) => A.components.find((e) => e.name === s).class, Z = () => {
  const s = A.components.filter((t) => t.dataDetection), e = A.plugins.filter((t) => t.dataDetection);
  return [...s, ...e].map((t) => t.name);
}, dt = (s, e) => {
  if (!s.name || !s.class) {
    console.error(`[Axentix] Error registering ${e} : Missing required parameters.`);
    return;
  }
  if (A[e].some((t) => t.name === s.name)) {
    console.error(`[Axentix] Error registering ${e} : Already exist.`);
    return;
  }
  s.autoInit && (s.autoInit.selector = s.autoInit.selector += ":not(.no-axentix-init)"), A[e].push(s);
}, pt = (s) => {
  dt(s, "components");
}, ut = (s) => s.replace(/[\w]([A-Z])/g, (e) => e[0] + "-" + e[1]).toLowerCase(), ft = (s, e = "") => {
  const t = ut(s);
  return e ? e + "-" + t : t;
}, yt = (s, e, t, n, d = "") => {
  const h = e[0].toUpperCase() + e.slice(1).toLowerCase();
  Z().includes(h) && t !== "Collapsible" && h !== "Sidenav" && (s[e] = F(h).getDefaultOptions());
  const y = d ? d + "-" + e : e, v = G(s[e], t, n, y);
  if (!(Object.keys(v).length === 0 && s.constructor === Object))
    return v;
}, G = (s, e, t, n = "") => Object.keys(s).reduce((d, h) => {
  if (typeof s[h] == "object" && s[h] !== null) {
    const y = yt(s, h, e, t, n);
    y && (d[h] = y);
  } else if (s[h] !== null) {
    const y = "data-" + e.toLowerCase() + "-" + ft(h, n);
    if (t.hasAttribute(y)) {
      const v = t.getAttribute(y);
      d[h] = typeof s[h] == "number" ? Number(v) : v, typeof s[h] == "boolean" && (d[h] = v === "true");
    }
  }
  return d;
}, {}), vt = (s, e) => {
  const t = Object.assign({}, F(s).getDefaultOptions());
  return G(t, s, e);
}, wt = () => {
  document.querySelectorAll("[data-ax]").forEach((e) => {
    let t = e.dataset.ax;
    if (t = t[0].toUpperCase() + t.slice(1).toLowerCase(), !Z().includes(t)) {
      console.error(
        `[Axentix] Error: ${t} component doesn't exist. 
 Did you forget to register him ?`,
        e
      );
      return;
    }
    try {
      const n = F(t);
      new n(`#${e.id}`);
    } catch (n) {
      console.error("[Axentix] Data: Unable to load " + t, n);
    }
  });
}, gt = () => {
  try {
    new Axentix.Axentix("all");
  } catch (s) {
    console.error("[Axentix] Unable to auto init.", s);
  }
};
document.addEventListener("DOMContentLoaded", () => {
  document.documentElement.dataset.axentix && gt(), wt();
});
const J = (...s) => s.reduce((e, t) => {
  for (let n in t)
    e[n] = typeof t[n] == "object" && t[n] !== null ? J(e[n], t[n]) : t[n];
  return e;
}, {}), mt = (s, e, t) => J(F(s).getDefaultOptions(), vt(s, t), e), xt = (s, e = document.createElement("div")) => (s[0].parentElement.insertBefore(e, s[0]), s.forEach((n) => e.appendChild(n)), e), w = (s, e, t) => {
  const n = new CustomEvent("ax." + e, {
    detail: t || {},
    bubbles: !0
  });
  s.dispatchEvent(n);
}, Lt = (s) => {
  const e = N.find((t) => t.type !== "Toast" && "#" + t.instance.el.id === s);
  return e ? e.instance : !1;
};
class bt {
  constructor() {
    I(this, "el");
  }
  removeListeners() {
  }
  setupListeners() {
  }
  setup() {
  }
  preventDbInstance(e) {
    if (e && Lt(e))
      throw new Error(`Instance already exist on ${e}`);
  }
  sync() {
    w(this.el, "component.sync"), this.removeListeners(), this.setupListeners();
  }
  reset() {
    w(this.el, "component.reset"), this.removeListeners(), this.setup();
  }
  destroy() {
    w(this.el, "component.destroy"), this.removeListeners();
    const e = N.findIndex((t) => t.instance.el.id === this.el.id);
    N.splice(e, 1);
  }
}
const Et = {
  animationDuration: 400,
  overlayClass: "grey dark-4",
  offset: 150,
  mobileOffset: 80,
  caption: ""
};
var L, b, E, C, O, a, D, k, l, g, m, p, R, u, x, f, T, V, S, _, U, j, H, tt, P, et, W, st, X, it, $, nt, z, ot, q, rt, B, M, ht, Y, lt;
class Q extends bt {
  constructor(t, n) {
    super();
    r(this, T);
    r(this, S);
    r(this, U);
    r(this, H);
    r(this, P);
    r(this, W);
    r(this, X);
    r(this, $);
    r(this, z);
    r(this, q);
    r(this, M);
    r(this, Y);
    I(this, "options");
    r(this, L, void 0);
    r(this, b, void 0);
    r(this, E, void 0);
    r(this, C, void 0);
    r(this, O, void 0);
    r(this, a, void 0);
    r(this, D, void 0);
    r(this, k, void 0);
    r(this, l, void 0);
    r(this, g, 0);
    r(this, m, 0);
    r(this, p, !1);
    r(this, R, !1);
    r(this, u, void 0);
    r(this, x, !1);
    r(this, f, !1);
    r(this, B, () => {
      i(this, p) && this.close();
    });
    try {
      this.preventDbInstance(t), N.push({ type: "Lightbox", instance: this }), this.el = document.querySelector(t), this.options = mt("Lightbox", n, this.el), this.setup();
    } catch (d) {
      console.error("[Axentix] Lightbox init error", d);
    }
  }
  setup() {
    w(this.el, "lightbox.setup"), this.el.style.transitionDuration = this.options.animationDuration + "ms", o(this, u, xt([this.el])), this.setupListeners();
  }
  setupListeners() {
    o(this, L, c(this, Y, lt).bind(this)), this.el.addEventListener("click", i(this, L)), o(this, E, c(this, z, ot).bind(this)), o(this, C, c(this, q, rt).bind(this)), o(this, O, i(this, B).bind(this)), o(this, b, c(this, $, nt).bind(this)), window.addEventListener("keyup", i(this, E)), window.addEventListener("scroll", i(this, C)), window.addEventListener("resize", i(this, O)), this.el.addEventListener("transitionend", i(this, b));
  }
  removeListeners() {
    this.el.removeEventListener("click", i(this, L)), this.el.removeEventListener("transitionend", i(this, b)), window.removeEventListener("keyup", i(this, E)), window.removeEventListener("scroll", i(this, C)), window.removeEventListener("resize", i(this, O)), o(this, L, void 0), o(this, E, void 0), o(this, C, void 0), o(this, O, void 0), o(this, b, void 0);
  }
  open() {
    o(this, f, !0);
    let t, n;
    i(this, x) ? t = n = i(this, u).getBoundingClientRect() : t = n = this.el.getBoundingClientRect(), o(this, x, !1), c(this, T, V).call(this), c(this, S, _).call(this);
    const d = window.innerHeight / 2, h = window.innerWidth / 2;
    o(this, l, t), this.el.style.width = i(this, l).width + "px", this.el.style.height = i(this, l).height + "px", this.el.style.top = "0", this.el.style.left = "0";
    const y = d + window.scrollY - (n.top + window.scrollY), v = h + window.scrollX - (n.left + window.scrollX);
    c(this, P, et).call(this), i(this, u).style.position = "relative", setTimeout(() => {
      w(this.el, "lightbox.open"), o(this, p, !0), this.el.classList.contains("responsive-media") && (o(this, R, !0), this.el.classList.remove("responsive-media")), this.el.classList.add("active"), i(this, u).style.width = i(this, l).width + "px", i(this, u).style.height = i(this, l).height + "px", this.el.style.width = i(this, m) + "px", this.el.style.height = i(this, g) + "px", this.el.style.top = y - i(this, g) / 2 + "px", this.el.style.left = v - i(this, m) / 2 + "px";
    }, 50);
  }
  close(t) {
    (t == null ? void 0 : t.key) && t.key !== "Escape" || (o(this, p, !1), o(this, x, !0), o(this, f, !1), w(this.el, "lightbox.close"), c(this, U, j).call(this), this.el.style.position = "absolute", this.el.style.top = "0px", this.el.style.left = "0px", this.el.style.width = i(this, l).width + "px", this.el.style.height = i(this, l).height + "px");
  }
}
L = new WeakMap(), b = new WeakMap(), E = new WeakMap(), C = new WeakMap(), O = new WeakMap(), a = new WeakMap(), D = new WeakMap(), k = new WeakMap(), l = new WeakMap(), g = new WeakMap(), m = new WeakMap(), p = new WeakMap(), R = new WeakMap(), u = new WeakMap(), x = new WeakMap(), f = new WeakMap(), T = new WeakSet(), V = function() {
  if (!i(this, a)) {
    if (c(this, W, st).call(this), o(this, a, document.createElement("div")), i(this, a).style.transitionDuration = this.options.animationDuration + "ms", i(this, a).className = "lightbox-overlay " + this.options.overlayClass, i(this, u).appendChild(i(this, a)), this.options.caption) {
      const t = document.createElement("p");
      t.className = "lightbox-caption", t.innerHTML = this.options.caption, i(this, a).appendChild(t);
    }
    o(this, D, this.close.bind(this)), i(this, a).addEventListener("click", i(this, D));
  }
}, S = new WeakSet(), _ = function() {
  setTimeout(() => {
    i(this, a).style.opacity = "1";
  }, 50);
}, U = new WeakSet(), j = function() {
  i(this, a).style.opacity = "0";
}, H = new WeakSet(), tt = function() {
  i(this, a).removeEventListener("click", i(this, D)), i(this, a).remove(), o(this, a, null);
}, P = new WeakSet(), et = function() {
  const t = window.innerWidth >= 960 ? this.options.offset : this.options.mobileOffset;
  window.innerWidth / window.innerHeight >= i(this, l).width / i(this, l).height ? (o(this, g, window.innerHeight - t), o(this, m, i(this, g) * i(this, l).width / i(this, l).height)) : (o(this, m, window.innerWidth - t), o(this, g, i(this, m) * i(this, l).height / i(this, l).width));
}, W = new WeakSet(), st = function() {
  o(this, k, []);
  for (let t = this.el; t && t !== document; t = t.parentNode) {
    const n = window.getComputedStyle(t);
    (n.overflow === "hidden" || n.overflowX === "hidden" || n.overflowY === "hidden") && (i(this, k).push(t), t !== document.body && t.style.setProperty("overflow", "visible", "important"), document.body.style.overflowX = "hidden");
  }
}, X = new WeakSet(), it = function() {
  i(this, k).forEach((t) => t.style.overflow = ""), document.body.style.overflowX = "";
}, $ = new WeakSet(), nt = function(t) {
  !t.propertyName.includes("width") && !t.propertyName.includes("height") || (i(this, x) ? (c(this, M, ht).call(this), o(this, x, !1), o(this, p, !1), w(this.el, "lightbox.closed")) : i(this, f) && (o(this, f, !1), w(this.el, "lightbox.opened")));
}, z = new WeakSet(), ot = function(t) {
  t.key === "Escape" && (i(this, f) || i(this, p)) && this.close();
}, q = new WeakSet(), rt = function() {
  (i(this, p) || i(this, f)) && this.close();
}, B = new WeakMap(), M = new WeakSet(), ht = function() {
  this.el.classList.remove("active"), c(this, H, tt).call(this), c(this, X, it).call(this), i(this, R) && this.el.classList.add("responsive-media"), i(this, u).removeAttribute("style"), this.el.style.position = "", this.el.style.left = "", this.el.style.top = "", this.el.style.width = "", this.el.style.height = "", this.el.style.transform = "";
}, Y = new WeakSet(), lt = function() {
  if (i(this, f) || i(this, p)) {
    this.close();
    return;
  }
  this.open();
}, I(Q, "getDefaultOptions", () => Et);
pt({
  class: Q,
  name: "Lightbox",
  dataDetection: !0,
  autoInit: {
    enabled: !0,
    selector: ".lightbox"
  }
});
export {
  Q as default
};
