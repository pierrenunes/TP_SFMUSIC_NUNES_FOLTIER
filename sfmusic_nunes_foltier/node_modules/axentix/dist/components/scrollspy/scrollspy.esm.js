var U = Object.defineProperty;
var z = (s, e, t) => e in s ? U(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t;
var L = (s, e, t) => (z(s, typeof e != "symbol" ? e + "" : e, t), t), D = (s, e, t) => {
  if (!e.has(s))
    throw TypeError("Cannot " + t);
};
var r = (s, e, t) => (D(s, e, "read from private field"), t ? t.call(s) : e.get(s)), l = (s, e, t) => {
  if (e.has(s))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(s) : e.set(s, t);
}, u = (s, e, t, n) => (D(s, e, "write to private field"), n ? n.call(s, t) : e.set(s, t), t);
var h = (s, e, t) => (D(s, e, "access private method"), t);
const A = [], x = {
  components: [],
  plugins: [],
  prefix: "ax",
  mode: ""
}, S = (s) => x.components.find((e) => e.name === s).class, I = () => {
  const s = x.components.filter((t) => t.dataDetection), e = x.plugins.filter((t) => t.dataDetection);
  return [...s, ...e].map((t) => t.name);
}, F = (s, e) => {
  if (!s.name || !s.class) {
    console.error(`[Axentix] Error registering ${e} : Missing required parameters.`);
    return;
  }
  if (x[e].some((t) => t.name === s.name)) {
    console.error(`[Axentix] Error registering ${e} : Already exist.`);
    return;
  }
  s.autoInit && (s.autoInit.selector = s.autoInit.selector += ":not(.no-axentix-init)"), x[e].push(s);
}, Y = (s) => {
  F(s, "components");
}, P = (s) => s.replace(/[\w]([A-Z])/g, (e) => e[0] + "-" + e[1]).toLowerCase(), W = (s, e = "") => {
  const t = P(s);
  return e ? e + "-" + t : t;
}, X = (s, e, t, n, i = "") => {
  const o = e[0].toUpperCase() + e.slice(1).toLowerCase();
  I().includes(o) && t !== "Collapsible" && o !== "Sidenav" && (s[e] = S(o).getDefaultOptions());
  const c = i ? i + "-" + e : e, d = q(s[e], t, n, c);
  if (!(Object.keys(d).length === 0 && s.constructor === Object))
    return d;
}, q = (s, e, t, n = "") => Object.keys(s).reduce((i, o) => {
  if (typeof s[o] == "object" && s[o] !== null) {
    const c = X(s, o, e, t, n);
    c && (i[o] = c);
  } else if (s[o] !== null) {
    const c = "data-" + e.toLowerCase() + "-" + W(o, n);
    if (t.hasAttribute(c)) {
      const d = t.getAttribute(c);
      i[o] = typeof s[o] == "number" ? Number(d) : d, typeof s[o] == "boolean" && (i[o] = d === "true");
    }
  }
  return i;
}, {}), Z = (s, e) => {
  const t = Object.assign({}, S(s).getDefaultOptions());
  return q(t, s, e);
}, G = () => {
  document.querySelectorAll("[data-ax]").forEach((e) => {
    let t = e.dataset.ax;
    if (t = t[0].toUpperCase() + t.slice(1).toLowerCase(), !I().includes(t)) {
      console.error(
        `[Axentix] Error: ${t} component doesn't exist. 
 Did you forget to register him ?`,
        e
      );
      return;
    }
    try {
      const n = S(t);
      new n(`#${e.id}`);
    } catch (n) {
      console.error("[Axentix] Data: Unable to load " + t, n);
    }
  });
}, J = () => {
  try {
    new Axentix.Axentix("all");
  } catch (s) {
    console.error("[Axentix] Unable to auto init.", s);
  }
};
document.addEventListener("DOMContentLoaded", () => {
  document.documentElement.dataset.axentix && J(), G();
});
const M = (...s) => s.reduce((e, t) => {
  for (let n in t)
    e[n] = typeof t[n] == "object" && t[n] !== null ? M(e[n], t[n]) : t[n];
  return e;
}, {}), K = (s, e, t) => M(S(s).getDefaultOptions(), Z(s, t), e), y = (s, e, t) => {
  const n = new CustomEvent("ax." + e, {
    detail: t || {},
    bubbles: !0
  });
  s.dispatchEvent(n);
}, Q = (s) => {
  const e = A.find((t) => t.type !== "Toast" && "#" + t.instance.el.id === s);
  return e ? e.instance : !1;
};
class V {
  constructor() {
    L(this, "el");
  }
  removeListeners() {
  }
  setupListeners() {
  }
  setup() {
  }
  preventDbInstance(e) {
    if (e && Q(e))
      throw new Error(`Instance already exist on ${e}`);
  }
  sync() {
    y(this.el, "component.sync"), this.removeListeners(), this.setupListeners();
  }
  reset() {
    y(this.el, "component.reset"), this.removeListeners(), this.setup();
  }
  destroy() {
    y(this.el, "component.destroy"), this.removeListeners();
    const e = A.findIndex((t) => t.instance.el.id === this.el.id);
    A.splice(e, 1);
  }
}
const _ = {
  offset: 200,
  linkSelector: "a",
  classes: "active",
  auto: {
    enabled: !1,
    classes: "",
    selector: ""
  }
};
var f, p, g, a, v, R, C, T, E, $, b, H, O, N, w, k;
class B extends V {
  constructor(t, n) {
    super();
    l(this, v);
    l(this, C);
    l(this, E);
    l(this, b);
    l(this, O);
    l(this, w);
    L(this, "options");
    l(this, f, void 0);
    l(this, p, void 0);
    l(this, g, void 0);
    l(this, a, void 0);
    try {
      this.preventDbInstance(t), A.push({ type: "ScrollSpy", instance: this }), this.el = document.querySelector(t), this.options = K("ScrollSpy", n, this.el), this.setup();
    } catch (i) {
      console.error("[Axentix] ScrollSpy init error", i);
    }
  }
  setup() {
    y(this.el, "scrollspy.setup"), this.options.auto.enabled ? h(this, C, T).call(this) : h(this, v, R).call(this), typeof this.options.classes == "string" && (this.options.classes = this.options.classes.split(" ")), u(this, f, ""), this.setupListeners(), h(this, w, k).call(this);
  }
  setupListeners() {
    u(this, p, h(this, w, k).bind(this)), window.addEventListener("scroll", r(this, p)), window.addEventListener("resize", r(this, p));
  }
  removeListeners() {
    window.removeEventListener("scroll", r(this, p)), window.removeEventListener("resize", r(this, p)), u(this, p, void 0);
  }
}
f = new WeakMap(), p = new WeakMap(), g = new WeakMap(), a = new WeakMap(), v = new WeakSet(), R = function() {
  u(this, g, Array.from(this.el.querySelectorAll(this.options.linkSelector))), u(this, a, r(this, g).map((t) => document.querySelector(t.getAttribute("href"))));
}, C = new WeakSet(), T = function() {
  u(this, a, Array.from(document.querySelectorAll(this.options.auto.selector))), u(this, g, r(this, a).map((t) => {
    const n = document.createElement("a");
    return n.className = this.options.auto.classes, n.setAttribute("href", "#" + t.id), n.innerHTML = t.innerHTML, this.el.appendChild(n), n;
  }));
}, E = new WeakSet(), $ = function() {
  const t = window.scrollY, n = window.scrollX, i = window.innerWidth, o = window.innerHeight, c = t + this.options.offset;
  return o + t >= document.body.offsetHeight - 2 ? r(this, a)[r(this, a).length - 1] : r(this, a).find((d) => {
    const m = d.getBoundingClientRect();
    return m.top + t >= t && m.left + n >= n && m.right <= i && m.bottom <= o && m.top + t <= c;
  });
}, b = new WeakSet(), H = function() {
  !r(this, f) || this.options.classes.forEach((t) => r(this, f).classList.remove(t));
}, O = new WeakSet(), N = function() {
  const t = window.scrollY;
  return r(this, a).reduce((n, i) => {
    const o = i.getBoundingClientRect().top + t, c = n.getBoundingClientRect().top + t;
    return o > t + this.options.offset ? n : Math.abs(o - t) < Math.abs(c - t) ? i : n;
  });
}, w = new WeakSet(), k = function() {
  let t = h(this, E, $).call(this);
  t || (t = h(this, O, N).call(this));
  const n = r(this, g).find((i) => i.getAttribute("href").split("#")[1] === t.id);
  n !== r(this, f) && (y(this.el, "scrollspy.update"), h(this, b, H).call(this), this.options.classes.forEach((i) => n.classList.add(i)), u(this, f, n));
}, L(B, "getDefaultOptions", () => _);
Y({
  class: B,
  name: "ScrollSpy",
  dataDetection: !0,
  autoInit: {
    enabled: !0,
    selector: ".scrollspy"
  }
});
export {
  B as default
};
