var te = Object.defineProperty;
var se = (e, t, s) => t in e ? te(e, t, { enumerable: !0, configurable: !0, writable: !0, value: s }) : e[t] = s;
var E = (e, t, s) => (se(e, typeof t != "symbol" ? t + "" : t, s), s), O = (e, t, s) => {
  if (!t.has(e))
    throw TypeError("Cannot " + s);
};
var i = (e, t, s) => (O(e, t, "read from private field"), s ? s.call(e) : t.get(e)), d = (e, t, s) => {
  if (t.has(e))
    throw TypeError("Cannot add the same private member more than once");
  t instanceof WeakSet ? t.add(e) : t.set(e, s);
}, m = (e, t, s, n) => (O(e, t, "write to private field"), n ? n.call(e, s) : t.set(e, s), s);
var u = (e, t, s) => (O(e, t, "access private method"), s);
const w = [], y = {
  components: [],
  plugins: [],
  prefix: "ax",
  mode: ""
}, R = (e) => `--${y.prefix}-${e}`, b = (e) => y.components.find((t) => t.name === e).class, P = () => {
  const e = y.components.filter((s) => s.dataDetection), t = y.plugins.filter((s) => s.dataDetection);
  return [...e, ...t].map((s) => s.name);
}, ne = (e, t) => {
  if (!e.name || !e.class) {
    console.error(`[Axentix] Error registering ${t} : Missing required parameters.`);
    return;
  }
  if (y[t].some((s) => s.name === e.name)) {
    console.error(`[Axentix] Error registering ${t} : Already exist.`);
    return;
  }
  e.autoInit && (e.autoInit.selector = e.autoInit.selector += ":not(.no-axentix-init)"), y[t].push(e);
}, oe = (e) => {
  ne(e, "components");
}, re = (e) => e.replace(/[\w]([A-Z])/g, (t) => t[0] + "-" + t[1]).toLowerCase(), ie = (e, t = "") => {
  const s = re(e);
  return t ? t + "-" + s : s;
}, le = (e, t, s, n, r = "") => {
  const o = t[0].toUpperCase() + t.slice(1).toLowerCase();
  P().includes(o) && s !== "Collapsible" && o !== "Sidenav" && (e[t] = b(o).getDefaultOptions());
  const l = r ? r + "-" + t : t, a = U(e[t], s, n, l);
  if (!(Object.keys(a).length === 0 && e.constructor === Object))
    return a;
}, U = (e, t, s, n = "") => Object.keys(e).reduce((r, o) => {
  if (typeof e[o] == "object" && e[o] !== null) {
    const l = le(e, o, t, s, n);
    l && (r[o] = l);
  } else if (e[o] !== null) {
    const l = "data-" + t.toLowerCase() + "-" + ie(o, n);
    if (s.hasAttribute(l)) {
      const a = s.getAttribute(l);
      r[o] = typeof e[o] == "number" ? Number(a) : a, typeof e[o] == "boolean" && (r[o] = a === "true");
    }
  }
  return r;
}, {}), ae = (e, t) => {
  const s = Object.assign({}, b(e).getDefaultOptions());
  return U(s, e, t);
}, ce = () => {
  document.querySelectorAll("[data-ax]").forEach((t) => {
    let s = t.dataset.ax;
    if (s = s[0].toUpperCase() + s.slice(1).toLowerCase(), !P().includes(s)) {
      console.error(
        `[Axentix] Error: ${s} component doesn't exist. 
 Did you forget to register him ?`,
        t
      );
      return;
    }
    try {
      const n = b(s);
      new n(`#${t.id}`);
    } catch (n) {
      console.error("[Axentix] Data: Unable to load " + s, n);
    }
  });
}, de = () => {
  try {
    new Axentix.Axentix("all");
  } catch (e) {
    console.error("[Axentix] Unable to auto init.", e);
  }
};
document.addEventListener("DOMContentLoaded", () => {
  document.documentElement.dataset.axentix && de(), ce();
});
const W = (...e) => e.reduce((t, s) => {
  for (let n in s)
    t[n] = typeof s[n] == "object" && s[n] !== null ? W(t[n], s[n]) : s[n];
  return t;
}, {}), fe = (e, t, s) => W(b(e).getDefaultOptions(), ae(e, s), t), ue = (e, t = document.createElement("div")) => (e[0].parentElement.insertBefore(t, e[0]), e.forEach((n) => t.appendChild(n)), t), he = (e) => e.replaceWith(...e.childNodes), T = (e, t, s) => {
  const n = new CustomEvent("ax." + t, {
    detail: s || {},
    bubbles: !0
  });
  e.dispatchEvent(n);
}, pe = (e) => {
  const t = w.find((s) => s.type !== "Toast" && "#" + s.instance.el.id === e);
  return t ? t.instance : !1;
}, me = () => Math.random().toString().split(".")[1], ve = (e) => e.checkValidity() || e.validationMessage, xe = (e, t) => {
  const s = document.createElement("div");
  s.axGenerated = !0, e.appendChild(s), s.classList.add("form-helper-invalid"), s.innerHTML = t;
}, ye = (e) => {
  const t = e.querySelector(".form-helper-invalid");
  !t || t.axGenerated && t.remove();
}, ge = (e) => {
  e.classList.remove("form-valid", "form-invalid", "form-no-helper"), ye(e);
}, Le = (e, t) => {
  const s = e.getAttribute("data-form-validate");
  let n = !1;
  if (s) {
    const l = s.toLowerCase().split(",");
    if (n = l.includes("auto"), l.includes("lazy") && t === "input")
      return;
  }
  const r = ve(e), o = e.closest(".form-field, .form-file");
  return ge(o), r !== !0 ? (n && typeof r == "string" ? xe(o, r) : o.querySelector(".form-helper-invalid") || o.classList.add("form-no-helper"), o.classList.add("form-invalid"), !1) : (o.classList.add("form-valid"), o.querySelector(".form-helper-valid") || o.classList.add("form-no-helper"), !0);
};
let B = !0;
const A = (e) => {
  e.forEach(Z);
}, G = (e) => {
  if (B) {
    B = !1;
    return;
  }
  setTimeout(() => {
    A(e);
  }, 10);
}, Z = (e) => {
  const t = e.closest(".form-field"), s = t.querySelector(".form-custom-select"), n = t.classList.contains("active"), r = ["date", "month", "week", "time"];
  let o = s && e.tagName === "DIV" && e.innerText.length > 0;
  s || (o = e.value.length > 0 || e.tagName !== "SELECT" && e.placeholder.length > 0 || e.tagName === "SELECT" || r.some((h) => e.matches(`[type="${h}"]`)));
  const l = document.activeElement === e, a = e.hasAttribute("disabled") || e.hasAttribute("readonly");
  e.firstInit ? (H(e, n, o, l, t, s), e.firstInit = !1, e.isInit = !0) : a || H(e, n, o, l, t, s);
}, H = (e, t, s, n, r, o) => {
  const l = e.type === "textarea", a = r.querySelector("label:not(.form-check)");
  !t && (s || n) ? r.classList.add("active") : t && !(s || n) && r.classList.remove("active"), l ? a && (a.style.backgroundColor = F(a)) : be(e, r, o, a), n && !l ? r.classList.add("is-focused") : o || r.classList.remove("is-focused"), n && l ? r.classList.add("is-textarea-focused") : r.classList.remove("is-textarea-focused");
}, be = (e, t, s, n) => {
  const r = e.clientWidth, o = e.offsetLeft, l = e.clientHeight + (s ? s.offsetTop : e.offsetTop) + "px", a = e.closest(".form-material").classList.contains("form-material-bordered");
  t.style.setProperty(R("form-material-position"), l);
  let h = o, $ = "left", ee = r + "px", V = 0;
  t.classList.contains("form-rtl") && ($ = "right", h = t.clientWidth - r - o), t.style.setProperty(R(`form-material-${$}-offset`), h + "px"), h != 0 && (V = o), t.style.setProperty(R("form-material-width"), ee), n && (n.style.left = V + "px", a && (n.style.backgroundColor = F(n)));
}, z = (e) => {
  const t = window.getComputedStyle(e).backgroundColor;
  if (t && !["transparent", "rgba(0, 0, 0, 0)"].includes(t))
    return t;
}, F = (e) => {
  e.style.backgroundColor = "";
  let t = e;
  for (; t.parentElement; ) {
    const n = z(t);
    if (n)
      return n;
    t = t.parentElement;
  }
  const s = z(document.documentElement);
  return s || "white";
}, J = (e, t) => {
  e.hasAttribute("data-form-validate") && Le(e, t.type);
}, Ee = (e, t) => {
  e.forEach((s) => {
    s === t.target && Z(s);
  });
}, we = (e, t) => {
  t.target.tagName === "FORM" && t.target.classList.contains("form-material") && G(e);
}, Ae = (e) => {
  e.forEach((o) => {
    o.firstInit = !0, o.validateRef = J.bind(null, o), o.addEventListener("input", o.validateRef), o.addEventListener("change", o.validateRef);
  }), A(e);
  const t = Ee.bind(null, e);
  document.addEventListener("focus", t, !0), document.addEventListener("blur", t, !0);
  const s = G.bind(null, e);
  window.addEventListener("pageshow", s);
  const n = we.bind(null, e);
  document.addEventListener("reset", n);
  const r = A.bind(null, e);
  window.addEventListener("resize", r);
}, Ce = (e, t) => {
  const s = e.files;
  s.length > 1 ? t.innerHTML = Array.from(s).map((n) => n.name).join(", ") : s[0] && (t.innerHTML = s[0].name);
}, Ie = (e) => {
  if (e.isInit)
    return;
  e.isInit = !0;
  const t = e.querySelector('input[type="file"]'), s = e.querySelector(".form-file-path");
  t.handleRef = Ce.bind(null, t, s), t.validateRef = J.bind(null, t), t.addEventListener("change", t.handleRef), t.addEventListener("input", t.validateRef), t.addEventListener("change", t.validateRef);
}, Se = () => {
  const e = Array.from(document.querySelectorAll(".form-file"));
  try {
    e.forEach(Ie);
  } catch (t) {
    console.error("[Axentix] Form file error", t);
  }
}, q = (e = document.querySelectorAll(
  ".form-material .form-field:not(.form-default) .form-control:not(.form-custom-select)"
)) => {
  const { setupInputs: t, detectInputs: s } = Array.from(e).reduce(
    (n, r) => (r.isInit ? n.detectInputs.push(r) : n.setupInputs.push(r), n),
    { setupInputs: [], detectInputs: [] }
  );
  Se();
  try {
    t.length > 0 && Ae(t), s.length > 0 && A(s);
  } catch (n) {
    console.error("[Axentix] Material forms error", n);
  }
};
document.addEventListener("DOMContentLoaded", () => q());
class ke {
  constructor() {
    E(this, "el");
  }
  removeListeners() {
  }
  setupListeners() {
  }
  setup() {
  }
  preventDbInstance(t) {
    if (t && pe(t))
      throw new Error(`Instance already exist on ${t}`);
  }
  sync() {
    T(this.el, "component.sync"), this.removeListeners(), this.setupListeners();
  }
  reset() {
    T(this.el, "component.reset"), this.removeListeners(), this.setup();
  }
  destroy() {
    T(this.el, "component.destroy"), this.removeListeners();
    const t = w.findIndex((s) => s.instance.el.id === this.el.id);
    w.splice(t, 1);
  }
}
const De = {
  inputClasses: ""
};
var f, v, c, x, p, C, Q, I, X, g, M, S, Y, k, _, L, N, D, j;
class K extends ke {
  constructor(s, n) {
    super();
    d(this, C);
    d(this, I);
    d(this, g);
    d(this, S);
    d(this, k);
    d(this, L);
    d(this, D);
    E(this, "options");
    d(this, f, void 0);
    d(this, v, void 0);
    d(this, c, void 0);
    d(this, x, void 0);
    d(this, p, void 0);
    try {
      this.preventDbInstance(s), w.push({ type: "Select", instance: this }), this.el = document.querySelector(s), this.options = fe("Select", n, this.el), this.setup();
    } catch (r) {
      console.error("[Axentix] Select init error", r);
    }
  }
  setup() {
    this.el.style.display = "none", m(this, v, ue([this.el])), i(this, v).className = "form-custom-select", u(this, C, Q).call(this);
  }
  reset() {
    this.destroy(!0), super.reset();
  }
  destroy(s) {
    s || super.destroy(), i(this, f) && (i(this, f).el.removeEventListener("ax.dropdown.open", i(this, p)), i(this, f).el.removeEventListener("ax.dropdown.close", i(this, p)), m(this, p, null), i(this, f).destroy(), i(this, f).el.remove(), m(this, f, null)), he(i(this, v)), this.el.classList.add("form-custom-select"), this.el.style.display = "";
  }
}
f = new WeakMap(), v = new WeakMap(), c = new WeakMap(), x = new WeakMap(), p = new WeakMap(), C = new WeakSet(), Q = function() {
  const s = `dropdown-${me()}`;
  m(this, c, document.createElement("div")), i(this, c).className = `form-control ${this.options.inputClasses}`, i(this, c).dataset.target = s;
  const n = document.createElement("div"), r = this.el.className.replace("form-control", "");
  if (n.className = `dropdown-content ${r}`, this.el.disabled) {
    i(this, c).setAttribute("disabled", ""), i(this, v).append(i(this, c)), u(this, g, M).call(this, n);
    return;
  }
  m(this, p, u(this, S, Y).bind(this));
  const o = document.createElement("div");
  o.className = "dropdown", o.id = s, o.addEventListener("ax.dropdown.open", i(this, p)), o.addEventListener("ax.dropdown.close", i(this, p)), Array.from(this.el.attributes).forEach((h) => {
    h.name.startsWith("data-dropdown") && o.setAttribute(h.name, h.value);
  }), o.append(i(this, c)), o.append(n), i(this, v).append(o), u(this, g, M).call(this, n);
  const l = b("Dropdown");
  m(this, f, new l(`#${s}`, {
    closeOnClick: !this.el.multiple,
    preventViewport: !0
  }));
  const a = window.getComputedStyle(o).zIndex;
  m(this, x, this.el.closest(".form-field").querySelector("label:not(.form-check)")), i(this, x) && (i(this, x).style.zIndex = a + 5);
}, I = new WeakSet(), X = function(s, n) {
  const r = document.createElement("div");
  r.className = "form-field";
  const o = document.createElement("label");
  o.className = "form-check";
  const l = document.createElement("input");
  l.type = "checkbox", n && l.setAttribute("disabled", "");
  const a = document.createElement("span");
  return a.innerHTML = s, o.append(l, a), r.append(o), r;
}, g = new WeakSet(), M = function(s) {
  for (const n of this.el.options) {
    const r = n.hasAttribute("disabled"), o = document.createElement("div");
    o.className = "dropdown-item", o.innerHTML = this.el.multiple ? u(this, I, X).call(this, n.text, r).innerHTML : n.text, o.axValue = n.value || n.text, r ? o.classList.add("form-disabled") : (o.axClickRef = u(this, k, _).bind(this, o), o.addEventListener("click", o.axClickRef)), (n.hasAttribute("selected") || !this.el.multiple && this.el.value === (n.value || n.text)) && u(this, L, N).call(this, o), s.append(o);
  }
}, S = new WeakSet(), Y = function() {
  i(this, c).closest(".form-field").classList.toggle("is-focused");
}, k = new WeakSet(), _ = function(s, n) {
  n.preventDefault(), s.classList.contains("form-selected") ? u(this, D, j).call(this, s) : u(this, L, N).call(this, s);
}, L = new WeakSet(), N = function(s) {
  const n = s.axValue;
  this.el.multiple ? s.querySelector("input").checked = !0 : i(this, f) && i(this, f).el.querySelectorAll(".dropdown-item").forEach((o) => o.classList.remove("form-selected")), s.classList.add("form-selected");
  const r = this.el.multiple ? [...i(this, c).innerText.split(", ").filter(Boolean), n].join(", ") : n;
  i(this, c).innerText = r, this.el.value = r, q([i(this, c)]);
}, D = new WeakSet(), j = function(s) {
  const n = s.axValue;
  s.classList.remove("form-selected");
  let r = "";
  if (this.el.multiple) {
    s.querySelector("input").checked = !1;
    const o = i(this, c).innerText.split(", ").filter(Boolean), l = o.findIndex((a) => a === n);
    o.splice(l, 1), r = o.join(", ");
  }
  i(this, c).innerText = r, this.el.value = r, q([i(this, c)]);
}, E(K, "getDefaultOptions", () => De);
oe({
  class: K,
  name: "Select",
  dataDetection: !0,
  autoInit: {
    enabled: !0,
    selector: ".form-custom-select"
  }
});
export {
  K as Select
};
