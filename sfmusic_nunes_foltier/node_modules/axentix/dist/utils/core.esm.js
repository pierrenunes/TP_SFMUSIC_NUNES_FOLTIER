var A = Object.defineProperty;
var g = (n, t, s) => t in n ? A(n, t, { enumerable: !0, configurable: !0, writable: !0, value: s }) : n[t] = s;
var l = (n, t, s) => (g(n, typeof t != "symbol" ? t + "" : t, s), s), x = (n, t, s) => {
  if (!t.has(n))
    throw TypeError("Cannot " + s);
};
var a = (n, t, s) => {
  if (t.has(n))
    throw TypeError("Cannot add the same private member more than once");
  t instanceof WeakSet ? t.add(n) : t.set(n, s);
};
var e = (n, t, s) => (x(n, t, "access private method"), s);
const u = {
  components: [],
  plugins: [],
  prefix: "ax",
  mode: ""
}, y = (n) => u.components.find((t) => t.name === n).class, C = () => {
  const n = u.components.filter(
    (s) => s.autoInit && s.autoInit.enabled
  ), t = u.plugins.filter((s) => s.autoInit && s.autoInit.enabled);
  return [...n, ...t].reduce((s, o) => (s[o.name] = document.querySelectorAll(o.autoInit.selector), s), {});
};
var h, d, i, p, r, m;
class L {
  constructor(t, s) {
    a(this, h);
    a(this, i);
    a(this, r);
    l(this, "component");
    l(this, "isAll");
    l(this, "options");
    this.component = t[0].toUpperCase() + t.slice(1).toLowerCase(), this.isAll = t === "all", this.options = this.isAll ? {} : s, e(this, h, d).call(this);
  }
}
h = new WeakSet(), d = function() {
  const t = C();
  if (t.hasOwnProperty(this.component)) {
    const o = e(this, i, p).call(this, t[this.component]);
    e(this, r, m).call(this, o, this.component);
  } else
    this.isAll && Object.keys(t).forEach((o) => {
      const c = e(this, i, p).call(this, t[o]);
      c.length > 0 && e(this, r, m).call(this, c, o);
    });
}, i = new WeakSet(), p = function(t) {
  return Array.from(t).map((s) => "#" + s.id);
}, r = new WeakSet(), m = function(t, s) {
  t.forEach((o) => {
    const c = y(s), f = [o, this.options];
    try {
      new c(...f);
    } catch (I) {
      console.error("[Axentix] Unable to load " + s, I);
    }
  });
};
export {
  L as Axentix
};
